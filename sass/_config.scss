// @file Config
// This file contains theme variables and compile order specifications.

// VARIABLES

// Font Sizes
$base-font-size: 16; // The font size set on the root html element.
$base-line-height: 1.5;

$h1-font-size: (32 / $base-font-size) * 1em;
$h2-font-size: (24 / $base-font-size) * 1em;
$h3-font-size: (21 / $base-font-size) * 1em;
$h4-font-size: 1 * 1em;
$h5-font-size: 0.83 * 1em;
$h6-font-size: 0.75 * 1em;

// Font Stacks
$serif-fallback: Georgia, "Times New Roman", Times, serif;
$sans-serif-fallback: "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;

$font-stack-1: $serif-fallback;
$font-stack-2: $sans-serif-fallback;

// Now create some variables for the font stacks we want to use on this site.
$base-font-family: $font-stack-1;

$h1-font-family: $font-stack-2;
$h2-font-family: $font-stack-2;
$h3-font-family: $font-stack-2;
$h4-font-family: $font-stack-2;
$h5-font-family: $font-stack-2;
$h6-font-family: $font-stack-2;

// Colors
/*
* Getter function for color palettes using SASS maps
* Link: http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/
* Usage: color: palette(brand,tan);
*/
@function palette($palette, $tone: 'base') {
	@return map-get( map-get($palettes, $palette), $tone );
}

$palettes: (
	mono: (
		black: #000,
		x-dark: #222,
		dark: #333,
		mid-dark: #666,
		base: #888, // We need one base value, so we can declare palette(mono) and not get an error
		mid-light: #999,
		light: #ccc,
		x-light: #e6e6e6,
		white: #fff Â 
	),
	brand: (
		base: #337ab7,
		green: #5cb85c,
		light-blue: #5bc0de,
		orange: #f0ad4e,
		red: #d9534f
	)
);

$h1-color: palette(brand,green);
$h2-color: palette(brand);
$h3-color: palette(brand);
$h4-color: palette(brand);
$h5-color: palette(brand);
$h6-color: palette(brand);

$link-color-link: palette(brand,red);
$link-color-hover: palette(brand);

// Imports
//
// This is the master configuration file for our theme, which contains an annotated
// list of @import functions which comprise the separate stylesheets which make up
// specific parts of the theme.

// Theme Modules
//
// Modules, designated with an underscore prefix, don't generate any CSS output
// themselves but instead contain mixins and definte base variables used by other
// stylesheets.

// CSS Philosiphies
//
// Use inline media queries
// Use inline IE styles

// CSS Grid Framework Logic
	@import "bourbon/bourbon";
	@import "grid_settings";
	@import "neat/neat";

// CSS Preprocess Logic
	@import "mixins";
	@import "placeholders";

// Theme Styles
	@import "base";
	@import "typography";
	@import "print";